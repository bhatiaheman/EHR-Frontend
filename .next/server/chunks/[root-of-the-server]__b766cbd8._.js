module.exports=[18622,(e,t,a)=>{t.exports=e.x("next/dist/compiled/next-server/app-page-turbo.runtime.prod.js",()=>require("next/dist/compiled/next-server/app-page-turbo.runtime.prod.js"))},56704,(e,t,a)=>{t.exports=e.x("next/dist/server/app-render/work-async-storage.external.js",()=>require("next/dist/server/app-render/work-async-storage.external.js"))},32319,(e,t,a)=>{t.exports=e.x("next/dist/server/app-render/work-unit-async-storage.external.js",()=>require("next/dist/server/app-render/work-unit-async-storage.external.js"))},20635,(e,t,a)=>{t.exports=e.x("next/dist/server/app-render/action-async-storage.external.js",()=>require("next/dist/server/app-render/action-async-storage.external.js"))},24725,(e,t,a)=>{t.exports=e.x("next/dist/server/app-render/after-task-async-storage.external.js",()=>require("next/dist/server/app-render/after-task-async-storage.external.js"))},14747,(e,t,a)=>{t.exports=e.x("path",()=>require("path"))},24361,(e,t,a)=>{t.exports=e.x("util",()=>require("util"))},70406,(e,t,a)=>{t.exports=e.x("next/dist/compiled/@opentelemetry/api",()=>require("next/dist/compiled/@opentelemetry/api"))},93695,(e,t,a)=>{t.exports=e.x("next/dist/shared/lib/no-fallback-error.external.js",()=>require("next/dist/shared/lib/no-fallback-error.external.js"))},61724,(e,t,a)=>{t.exports=e.x("next/dist/compiled/next-server/app-route-turbo.runtime.prod.js",()=>require("next/dist/compiled/next-server/app-route-turbo.runtime.prod.js"))},41926,e=>{"use strict";e.s(["getAccessToken",()=>n]);var t=e.i(65617);let a=`${process.env.MODMED_BASE_URL}/ema-dev/firm/${process.env.MODMED_FIRM_PREFIX}/ema/ws/oauth2/grant`,r=null,s=0;async function n(){if(r&&Date.now()<s)return r;try{if(!process.env.MODMED_USERNAME||!process.env.MODMED_PASSWORD||!process.env.MODMED_API_KEY)throw Error("Missing required environment variables for authentication");let e=await t.default.post(a,new URLSearchParams({grant_type:"password",username:process.env.MODMED_USERNAME,password:process.env.MODMED_PASSWORD}),{headers:{"Content-Type":"application/x-www-form-urlencoded","x-api-key":process.env.MODMED_API_KEY}});if(r=e.data.access_token,s=Date.now()+1e3*e.data.expires_in-6e4,!r)throw Error("Failed to obtain access token");return r}catch(e){throw console.error("Token fetch error:",e.response?.data||e.message),Error(`Authentication failed: ${e.response?.data?.error||e.message}`)}}},5083,(e,t,a)=>{},81502,e=>{"use strict";e.s(["handler",()=>C,"patchFetch",()=>S,"routeModule",()=>T,"serverHooks",()=>P,"workAsyncStorage",()=>D,"workUnitAsyncStorage",()=>O],81502);var t=e.i(47909),a=e.i(74017),r=e.i(96250),s=e.i(59756),n=e.i(61916),o=e.i(69741),i=e.i(16795),d=e.i(87718),l=e.i(95169),c=e.i(47587),u=e.i(66012),p=e.i(70101),m=e.i(26937),g=e.i(10372),f=e.i(93695);e.i(52474);var x=e.i(220);e.s(["GET",()=>E,"POST",()=>y,"PUT",()=>M],82442);var h=e.i(89171),v=e.i(41926);let R=`${process.env.MODMED_BASE_URL}/ema-dev/firm/${process.env.MODMED_FIRM_PREFIX}/ema/fhir/v2/MedicationStatement`;async function w(e,t,a,r,s=0){if(!process.env.MODMED_API_KEY){if(console.log(`Mocking ${e} request to ${t}`),"GET"===e)return{status:200,data:{resourceType:"Bundle",total:1,entry:[{resource:{resourceType:"MedicationStatement",id:"mock-med-123",status:"active",medicationCodeableConcept:{coding:[{system:"http://snomed.info/sct",code:"12345",display:"Aspirin"}]},subject:{reference:"Patient/mock-123"},effectiveDateTime:"2025-01-01",dosage:[{text:"1 tablet daily",doseQuantity:{value:1,unit:"tablet"}}]}}]}};if("POST"===e||"PUT"===e)return{status:"POST"===e?201:200,data:{...a,id:a?.id||`mock-med-${Date.now()}`}}}let n=r||await (0,v.getAccessToken)(),o={accept:"application/fhir+json",authorization:`Bearer ${n}`,"x-api-key":process.env.MODMED_API_KEY,"content-type":"application/fhir+json"};try{let r=new AbortController,i=setTimeout(()=>r.abort(),1e4),d=await fetch(t,{method:e,headers:o,body:a?JSON.stringify(a):void 0,signal:r.signal});clearTimeout(i),console.log(`ModMed API Request: ${e} ${t}`),console.log(`ModMed API Response Status: ${d.status} ${d.statusText}`),console.log("ModMed API Response Headers:",Object.fromEntries(d.headers.entries()));let l=d.headers.get("content-type");if(!d.ok){let r={status:d.status,statusText:d.statusText},o=await d.text();if(console.log("Raw Response Body:",o||"Empty response"),l?.includes("application/json")||l?.includes("application/fhir+json"))try{let e=JSON.parse(o);r={...r,...e},console.log("Parsed Error Response:",e)}catch(e){console.warn("Failed to parse error response as JSON:",e),r.rawText=o||"Empty response"}else r.rawText=o||"Empty response";if((429===d.status||503===d.status)&&s<3)return console.log(`Retrying request (attempt ${s+2})...`),await new Promise(e=>setTimeout(e,1e3*(s+1))),w(e,t,a,n,s+1);throw Error(JSON.stringify(r))}if(204===d.status||!l?.includes("json"))return{status:d.status,data:null};let c=await d.json();return console.log("ModMed API Success Response:",JSON.stringify(c,null,2)),{status:d.status,data:c}}catch(e){if("AbortError"===e.name)throw Error("Request timed out after 10 seconds");throw console.error("API request error:",e.message),e}}async function E(e){try{let{searchParams:t}=new URL(e.url),a=t.get("id"),r=t.get("patient"),s=t.get("_count")||"100",n=t.get("page")||"1",o=R;o=a?`${R}/${a}`:r?`${R}?patient=${r}&_count=${s}&page=${n}`:`${R}?_count=${s}&page=${n}`;let i=await (0,v.getAccessToken)(),d=(await w("GET",o,void 0,i)).data||{},l=a?[d].filter(Boolean).map(e=>({id:e.id||"N/A",medication:e.medicationCodeableConcept?.coding?.[0]?.display||"Unknown",status:e.status||"unknown",patientId:e.subject?.reference?.replace("Patient/","")||"N/A",effectiveDate:e.effectiveDateTime||"",dosage:e.dosage?.[0]?.text||"N/A"})):d.entry?.map(e=>{let t=e.resource;return{id:t.id||"N/A",medication:t.medicationCodeableConcept?.coding?.[0]?.display||"Unknown",status:t.status||"unknown",patientId:t.subject?.reference?.replace("Patient/","")||"N/A",effectiveDate:t.effectiveDateTime||"",dosage:t.dosage?.[0]?.text||"N/A"}})||[];return h.NextResponse.json(l)}catch(t){console.error("Error fetching medications:",t.message);let e=t.message.startsWith("{")?JSON.parse(t.message):{details:t.message};return h.NextResponse.json({error:"Failed to fetch medications",details:e},{status:e.status||500})}}async function y(e){try{let t=await (0,v.getAccessToken)(),a=await e.json();if(!a.medication||!a.status||!a.patientId)throw Error("Missing required fields: medication, status, patientId");let r={resourceType:"MedicationStatement",status:a.status,medicationCodeableConcept:{coding:[{system:"http://snomed.info/sct",code:a.medicationCode||"12345",display:a.medication}]},subject:{reference:`Patient/${a.patientId}`},effectiveDateTime:a.effectiveDate||new Date().toISOString().split("T")[0],dosage:a.dosage?[{text:a.dosage,doseQuantity:{value:a.doseValue||1,unit:a.doseUnit||"tablet"}}]:void 0};console.log("FHIR Payload Sent to ModMed (POST):",JSON.stringify(r,null,2));let s=await w("POST",R,r,t);return h.NextResponse.json(s.data||{message:"Medication created",id:s.data?.id},{status:201})}catch(t){console.error("Error creating medication:",t.message);let e=t.message.startsWith("{")?JSON.parse(t.message):{details:t.message};return h.NextResponse.json({error:"Failed to create medication",details:e},{status:e.status||500})}}async function M(e){try{let t=await (0,v.getAccessToken)(),a=await e.json();if(!a.id||!a.medication||!a.status||!a.patientId)throw Error("Missing required fields: id, medication, status, patientId");let r={resourceType:"MedicationStatement",id:a.id,status:a.status,medicationCodeableConcept:{coding:[{system:"http://snomed.info/sct",code:a.medicationCode||"12345",display:a.medication}]},subject:{reference:`Patient/${a.patientId}`},effectiveDateTime:a.effectiveDate||new Date().toISOString().split("T")[0],dosage:a.dosage?[{text:a.dosage,doseQuantity:{value:a.doseValue||1,unit:a.doseUnit||"tablet"}}]:void 0},s=await w("PUT",`${R}/${a.id}`,r,t);return h.NextResponse.json(s.data||{message:"Medication updated",id:a.id},{status:200})}catch(t){console.error("Error updating medication:",t.message);let e=t.message.startsWith("{")?JSON.parse(t.message):{details:t.message};return h.NextResponse.json({error:"Failed to update medication",details:e},{status:e.status||500})}}var A=e.i(82442);let T=new t.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/medication/route",pathname:"/api/medication",filename:"route",bundlePath:""},distDir:".next",relativeProjectDir:"",resolvedPagePath:"[project]/app/api/medication/route.ts",nextConfigOutput:"",userland:A}),{workAsyncStorage:D,workUnitAsyncStorage:O,serverHooks:P}=T;function S(){return(0,r.patchFetch)({workAsyncStorage:D,workUnitAsyncStorage:O})}async function C(e,t,r){var h;let v="/api/medication/route";v=v.replace(/\/index$/,"")||"/";let R=await T.prepare(e,t,{srcPage:v,multiZoneDraftMode:!1});if(!R)return t.statusCode=400,t.end("Bad Request"),null==r.waitUntil||r.waitUntil.call(r,Promise.resolve()),null;let{buildId:w,params:E,nextConfig:y,isDraftMode:M,prerenderManifest:A,routerServerContext:D,isOnDemandRevalidate:O,revalidateOnlyGenerated:P,resolvedPathname:S}=R,C=(0,o.normalizeAppPath)(v),b=!!(A.dynamicRoutes[C]||A.routes[S]);if(b&&!M){let e=!!A.routes[S],t=A.dynamicRoutes[C];if(t&&!1===t.fallback&&!e)throw new f.NoFallbackError}let N=null;!b||T.isDev||M||(N="/index"===(N=S)?"/":N);let _=!0===T.isDev||!b,j=b&&!_,k=e.method||"GET",I=(0,n.getTracer)(),$=I.getActiveScopeSpan(),q={params:E,prerenderManifest:A,renderOpts:{experimental:{cacheComponents:!!y.experimental.cacheComponents,authInterrupts:!!y.experimental.authInterrupts},supportsDynamicResponse:_,incrementalCache:(0,s.getRequestMeta)(e,"incrementalCache"),cacheLifeProfiles:null==(h=y.experimental)?void 0:h.cacheLife,isRevalidate:j,waitUntil:r.waitUntil,onClose:e=>{t.on("close",e)},onAfterTaskError:void 0,onInstrumentationRequestError:(t,a,r)=>T.onRequestError(e,t,r,D)},sharedContext:{buildId:w}},U=new i.NodeNextRequest(e),H=new i.NodeNextResponse(t),F=d.NextRequestAdapter.fromNodeNextRequest(U,(0,d.signalFromNodeResponse)(t));try{let o=async a=>T.handle(F,q).finally(()=>{if(!a)return;a.setAttributes({"http.status_code":t.statusCode,"next.rsc":!1});let r=I.getRootSpanAttributes();if(!r)return;if(r.get("next.span_type")!==l.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${r.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let s=r.get("next.route");if(s){let e=`${k} ${s}`;a.setAttributes({"next.route":s,"http.route":s,"next.span_name":e}),a.updateName(e)}else a.updateName(`${k} ${e.url}`)}),i=async n=>{var i,d;let l=async({previousCacheEntry:a})=>{try{if(!(0,s.getRequestMeta)(e,"minimalMode")&&O&&P&&!a)return t.statusCode=404,t.setHeader("x-nextjs-cache","REVALIDATED"),t.end("This page could not be found"),null;let i=await o(n);e.fetchMetrics=q.renderOpts.fetchMetrics;let d=q.renderOpts.pendingWaitUntil;d&&r.waitUntil&&(r.waitUntil(d),d=void 0);let l=q.renderOpts.collectedTags;if(!b)return await (0,u.sendResponse)(U,H,i,q.renderOpts.pendingWaitUntil),null;{let e=await i.blob(),t=(0,p.toNodeOutgoingHttpHeaders)(i.headers);l&&(t[g.NEXT_CACHE_TAGS_HEADER]=l),!t["content-type"]&&e.type&&(t["content-type"]=e.type);let a=void 0!==q.renderOpts.collectedRevalidate&&!(q.renderOpts.collectedRevalidate>=g.INFINITE_CACHE)&&q.renderOpts.collectedRevalidate,r=void 0===q.renderOpts.collectedExpire||q.renderOpts.collectedExpire>=g.INFINITE_CACHE?void 0:q.renderOpts.collectedExpire;return{value:{kind:x.CachedRouteKind.APP_ROUTE,status:i.status,body:Buffer.from(await e.arrayBuffer()),headers:t},cacheControl:{revalidate:a,expire:r}}}}catch(t){throw(null==a?void 0:a.isStale)&&await T.onRequestError(e,t,{routerKind:"App Router",routePath:v,routeType:"route",revalidateReason:(0,c.getRevalidateReason)({isRevalidate:j,isOnDemandRevalidate:O})},D),t}},f=await T.handleResponse({req:e,nextConfig:y,cacheKey:N,routeKind:a.RouteKind.APP_ROUTE,isFallback:!1,prerenderManifest:A,isRoutePPREnabled:!1,isOnDemandRevalidate:O,revalidateOnlyGenerated:P,responseGenerator:l,waitUntil:r.waitUntil});if(!b)return null;if((null==f||null==(i=f.value)?void 0:i.kind)!==x.CachedRouteKind.APP_ROUTE)throw Object.defineProperty(Error(`Invariant: app-route received invalid cache entry ${null==f||null==(d=f.value)?void 0:d.kind}`),"__NEXT_ERROR_CODE",{value:"E701",enumerable:!1,configurable:!0});(0,s.getRequestMeta)(e,"minimalMode")||t.setHeader("x-nextjs-cache",O?"REVALIDATED":f.isMiss?"MISS":f.isStale?"STALE":"HIT"),M&&t.setHeader("Cache-Control","private, no-cache, no-store, max-age=0, must-revalidate");let h=(0,p.fromNodeOutgoingHttpHeaders)(f.value.headers);return(0,s.getRequestMeta)(e,"minimalMode")&&b||h.delete(g.NEXT_CACHE_TAGS_HEADER),!f.cacheControl||t.getHeader("Cache-Control")||h.get("Cache-Control")||h.set("Cache-Control",(0,m.getCacheControlHeader)(f.cacheControl)),await (0,u.sendResponse)(U,H,new Response(f.value.body,{headers:h,status:f.value.status||200})),null};$?await i($):await I.withPropagatedContext(e.headers,()=>I.trace(l.BaseServerSpan.handleRequest,{spanName:`${k} ${e.url}`,kind:n.SpanKind.SERVER,attributes:{"http.method":k,"http.target":e.url}},i))}catch(t){if($||t instanceof f.NoFallbackError||await T.onRequestError(e,t,{routerKind:"App Router",routePath:C,routeType:"route",revalidateReason:(0,c.getRevalidateReason)({isRevalidate:j,isOnDemandRevalidate:O})}),b)throw t;return await (0,u.sendResponse)(U,H,new Response(null,{status:500})),null}}}];

//# sourceMappingURL=%5Broot-of-the-server%5D__b766cbd8._.js.map