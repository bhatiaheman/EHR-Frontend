{"version":3,"sources":["turbopack:///[project]/components/appointments/AppointmentTable.tsx","turbopack:///[project]/components/appointments/AppointmentModal.tsx","turbopack:///[project]/app/(dashboard)/appointments/page.tsx","turbopack:///[project]/hooks/useAppointments.ts"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { HiOutlineEye } from \"react-icons/hi\";\r\nimport { Appointment } from \"@/types/appointment.types\";\r\nimport AppointmentModal from \"./AppointmentModal\"; // create a modal similar to PatientModal for appointments\r\n\r\ninterface Props {\r\n  appointments: Appointment[];\r\n}\r\n\r\nconst statusColors: Record<string, string> = {\r\n  Scheduled: \"bg-blue-500\",\r\n  Completed: \"bg-green-500\",\r\n  Cancelled: \"bg-red-500\",\r\n};\r\n\r\nexport default function AppointmentTable({ appointments }: Props) {\r\n  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const appointmentsPerPage = 10;\r\n\r\n  const totalPages = Math.ceil(appointments.length / appointmentsPerPage);\r\n  const startIndex = (currentPage - 1) * appointmentsPerPage;\r\n  const currentAppointments = appointments.slice(startIndex, startIndex + appointmentsPerPage);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"overflow-x-auto border rounded-lg shadow-md\">\r\n        <table className=\"min-w-full divide-y divide-gray-200\">\r\n          <thead className=\"bg-gray-100\">\r\n            <tr>\r\n              {[\"ID\", \"Patient\", \"Provider\", \"Date\", \"Time\", \"Type\", \"Status\", \"Actions\"].map((h) => (\r\n                <th\r\n                  key={h}\r\n                  className=\"px-4 py-2 text-left text-gray-700 uppercase text-sm font-medium\"\r\n                >\r\n                  {h}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody className=\"bg-white divide-y divide-gray-200\">\r\n            {currentAppointments.map((a) => (\r\n              <tr key={a.id} className=\"hover:bg-gray-50\">\r\n                <td className=\"px-4 py-2\">{a.id}</td>\r\n                <td className=\"px-4 py-2\">{a.patientName}</td>\r\n                <td className=\"px-4 py-2\">{a.providerName}</td>\r\n                <td className=\"px-4 py-2\">{a.date}</td>\r\n                <td className=\"px-4 py-2\">{a.time}</td>\r\n                <td className=\"px-4 py-2\">{a.type}</td>\r\n                <td className=\"px-4 py-2\">\r\n                  <span\r\n                    className={`px-2 py-1 text-xs rounded-full text-white ${\r\n                      statusColors[a.status] || \"bg-gray-500\"\r\n                    }`}\r\n                  >\r\n                    {a.status}\r\n                  </span>\r\n                </td>\r\n                <td className=\"px-4 py-2\">\r\n                  <HiOutlineEye\r\n                    size={22}\r\n                    className=\"cursor-pointer text-gray-600 hover:text-blue-500\"\r\n                    onClick={() => setSelectedAppointment(a)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n\r\n      {selectedAppointment && (\r\n        <AppointmentModal\r\n          appointment={selectedAppointment}\r\n          onClose={() => setSelectedAppointment(null)}\r\n          onSubmit={(updated) => {\r\n            setSelectedAppointment(null);\r\n          }}\r\n        />\r\n      )}\r\n\r\n\r\n      <div className=\"flex justify-between items-center mt-4\">\r\n        <p className=\"text-sm text-gray-600\">\r\n          Showing {startIndex + 1}â€“{Math.min(startIndex + appointmentsPerPage, appointments.length)} of{\" \"}\r\n          {appointments.length}\r\n        </p>\r\n        <div className=\"flex gap-2\">\r\n          <button\r\n            disabled={currentPage === 1}\r\n            onClick={() => setCurrentPage((p) => p - 1)}\r\n            className=\"px-3 py-1 border rounded disabled:opacity-50\"\r\n          >\r\n            Prev\r\n          </button>\r\n          {Array.from({ length: totalPages }, (_, i) => (\r\n            <button\r\n              key={i}\r\n              onClick={() => setCurrentPage(i + 1)}\r\n              className={`px-3 py-1 border rounded ${\r\n                currentPage === i + 1 ? \"bg-blue-500 text-white\" : \"\"\r\n              }`}\r\n            >\r\n              {i + 1}\r\n            </button>\r\n          ))}\r\n          <button\r\n            disabled={currentPage === totalPages}\r\n            onClick={() => setCurrentPage((p) => p + 1)}\r\n            className=\"px-3 py-1 border rounded disabled:opacity-50\"\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Appointment } from \"@/types/appointment.types\";\r\n\r\ninterface Props {\r\n  appointment?: Appointment; \r\n  onClose: () => void;\r\n  onSubmit: (data: Appointment) => void;\r\n}\r\n\r\nexport default function AppointmentFormModal({ appointment, onClose, onSubmit }: Props) {\r\n  const [edited, setEdited] = useState<Appointment>({\r\n    id: appointment?.id || 0,\r\n    patientId: appointment?.patientId || 0,\r\n    patientName: appointment?.patientName || \"\",\r\n    providerId: appointment?.providerId || 0,\r\n    providerName: appointment?.providerName || \"\",\r\n    date: appointment?.date || \"\",\r\n    time: appointment?.time || \"\",\r\n    type: appointment?.type || \"Consultation\",\r\n    status: appointment?.status || \"Scheduled\",\r\n    notes: appointment?.notes || \"\",\r\n  });\r\n\r\n  const typeOptions = [\"Consultation\", \"Follow-up\", \"Procedure\", \"Other\"];\r\n  const statusOptions = [\"Scheduled\", \"Completed\", \"Cancelled\"];\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black/30 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white rounded-lg w-[90%] max-w-3xl p-6 relative\">\r\n        <button\r\n          className=\"absolute top-3 right-3 text-gray-500 hover:text-gray-700\"\r\n          onClick={onClose}\r\n        >\r\n          X\r\n        </button>\r\n\r\n        <h2 className=\"text-2xl font-semibold mb-4\">\r\n          {appointment ? \"Update Appointment\" : \"Add Appointment\"}\r\n        </h2>\r\n\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <div>\r\n            <label className=\"font-medium\">Patient Name</label>\r\n            <input\r\n              type=\"text\"\r\n              value={edited.patientName}\r\n              onChange={(e) => setEdited({ ...edited, patientName: e.target.value })}\r\n              className=\"border rounded px-2 py-1 w-full\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"font-medium\">Provider Name</label>\r\n            <input\r\n              type=\"text\"\r\n              value={edited.providerName}\r\n              onChange={(e) => setEdited({ ...edited, providerName: e.target.value })}\r\n              className=\"border rounded px-2 py-1 w-full\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"font-medium\">Date</label>\r\n            <input\r\n              type=\"date\"\r\n              value={edited.date}\r\n              onChange={(e) => setEdited({ ...edited, date: e.target.value })}\r\n              className=\"border rounded px-2 py-1 w-full\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"font-medium\">Time</label>\r\n            <input\r\n              type=\"time\"\r\n              value={edited.time}\r\n              onChange={(e) => setEdited({ ...edited, time: e.target.value })}\r\n              className=\"border rounded px-2 py-1 w-full\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"font-medium\">Type</label>\r\n            <select\r\n              value={edited.type}\r\n              onChange={(e) =>\r\n                setEdited({ ...edited, type: e.target.value as Appointment[\"type\"] })\r\n              }\r\n              className=\"border rounded px-2 py-1 w-full\"\r\n            >\r\n              {typeOptions.map((t) => (\r\n                <option key={t} value={t}>\r\n                  {t}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"font-medium\">Status</label>\r\n            <select\r\n              value={edited.status}\r\n              onChange={(e) =>\r\n                setEdited({ ...edited, status: e.target.value as Appointment[\"status\"] })\r\n              }\r\n              className=\"border rounded px-2 py-1 w-full\"\r\n            >\r\n              {statusOptions.map((s) => (\r\n                <option key={s} value={s}>\r\n                  {s}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"col-span-2\">\r\n            <label className=\"font-medium\">Notes</label>\r\n            <textarea\r\n              value={edited.notes || \"\"}\r\n              onChange={(e) => setEdited({ ...edited, notes: e.target.value })}\r\n              className=\"border rounded px-2 py-1 w-full\"\r\n              rows={3}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          onClick={() => onSubmit(edited)}\r\n          className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n        >\r\n          {appointment ? \"Update Appointment\" : \"Add Appointment\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","\"use client\";\r\nimport AppointmentTable from '@/components/appointments/AppointmentTable';\r\nimport { Button } from '@/components/ui/button'\r\nimport { useAddAppointment, useAppointments } from '@/hooks/useAppointments';\r\nimport React from 'react'\r\n\r\nconst Appointmnets = () => {\r\n\r\n    const [modalOpen, setModalOpen] = React.useState(false);\r\n    const addAppointmentMutation = useAddAppointment();\r\n\r\n    const {data, isLoading, error} = useAppointments();\r\n\r\n    if(isLoading) return <div>Loading...</div>\r\n    if(error) return <div>Error loading patients</div>\r\n\r\n  return (\r\n    <div className='flex flex-col gap-8 m-6'>\r\n      <div className='flex flex-row justify-between items-center'>\r\n        <div>\r\n          <h1 className='text-4xl font-semibold'>Appointments</h1>\r\n          <p className='text-xl text-muted-foreground'>Manage patient appointments and scheduling</p>\r\n        </div>\r\n\r\n        <Button className='bg-blue-600 hover:bg-blue-700 text-white'\r\n        onClick={() => setModalOpen(true)}>\r\n          + Add Patient\r\n        </Button>\r\n      </div>\r\n\r\n\r\n      {data && <AppointmentTable appointments={data}/>}\r\n\r\n \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Appointmnets\r\n","// hooks/useAppointments.ts\r\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport { Appointment } from \"../types/appointment.types\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nlet appointments: Appointment[] = [\r\n  {\r\n      id: 1,\r\n      patientId: 1,\r\n      patientName: \"John Doe\",\r\n      providerId: 1,\r\n      providerName: \"Dr. Smith\",\r\n      date: \"2025-09-20\",\r\n      time: \"10:00\",\r\n      status: \"Scheduled\",\r\n      type: \"Consultation\"\r\n  },\r\n  {\r\n      id: 2,\r\n      patientId: 2,\r\n      patientName: \"Jane Smith\",\r\n      providerId: 2,\r\n      providerName: \"Dr. Adams\",\r\n      date: \"2025-09-21\",\r\n      time: \"11:30\",\r\n      status: \"Scheduled\",\r\n      type: \"Consultation\"\r\n  },\r\n];\r\n\r\nexport function useAppointments() {\r\n  return useQuery<Appointment[]>({\r\n    queryKey: [\"appointments\"],\r\n    queryFn: async () => {\r\n      await new Promise((res) => setTimeout(res, 300));\r\n      return appointments;\r\n    },\r\n  });\r\n}\r\n\r\nexport function useAddAppointment() {\r\n  const qc = useQueryClient();\r\n  return useMutation({\r\n    mutationFn: async (newAppointment: Appointment) => {\r\n      appointments.push(newAppointment);\r\n      return newAppointment;\r\n    },\r\n    onSuccess: () => {\r\n      qc.invalidateQueries({ queryKey: [\"appointments\"] });\r\n      toast.success(\"Appointment added successfully\");\r\n    },\r\n\r\n    onError: () => {\r\n        toast.error(\"Error adding appointment\");\r\n    }\r\n  });\r\n}\r\n\r\nexport function useUpdateAppointment() {\r\n  const qc = useQueryClient();\r\n  return useMutation({\r\n    mutationFn: async (updated: Appointment) => {\r\n      appointments = appointments.map((a) =>\r\n        a.id === updated.id ? { ...a, ...updated } : a\r\n      );\r\n      return updated;\r\n    },\r\n    onSuccess: () => {\r\n       qc.invalidateQueries({ queryKey: [\"appointments\"] });\r\n       toast.success(\"Appointment updated successfully\");\r\n    },\r\n\r\n    onError: () => {\r\n        toast.error(\"Error updating appointment\");\r\n    }\r\n  });\r\n}\r\n"],"names":[],"mappings":"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"}