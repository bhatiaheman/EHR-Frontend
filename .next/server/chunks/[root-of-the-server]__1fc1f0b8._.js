module.exports=[18622,(e,t,r)=>{t.exports=e.x("next/dist/compiled/next-server/app-page-turbo.runtime.prod.js",()=>require("next/dist/compiled/next-server/app-page-turbo.runtime.prod.js"))},56704,(e,t,r)=>{t.exports=e.x("next/dist/server/app-render/work-async-storage.external.js",()=>require("next/dist/server/app-render/work-async-storage.external.js"))},32319,(e,t,r)=>{t.exports=e.x("next/dist/server/app-render/work-unit-async-storage.external.js",()=>require("next/dist/server/app-render/work-unit-async-storage.external.js"))},20635,(e,t,r)=>{t.exports=e.x("next/dist/server/app-render/action-async-storage.external.js",()=>require("next/dist/server/app-render/action-async-storage.external.js"))},24725,(e,t,r)=>{t.exports=e.x("next/dist/server/app-render/after-task-async-storage.external.js",()=>require("next/dist/server/app-render/after-task-async-storage.external.js"))},14747,(e,t,r)=>{t.exports=e.x("path",()=>require("path"))},24361,(e,t,r)=>{t.exports=e.x("util",()=>require("util"))},70406,(e,t,r)=>{t.exports=e.x("next/dist/compiled/@opentelemetry/api",()=>require("next/dist/compiled/@opentelemetry/api"))},93695,(e,t,r)=>{t.exports=e.x("next/dist/shared/lib/no-fallback-error.external.js",()=>require("next/dist/shared/lib/no-fallback-error.external.js"))},61724,(e,t,r)=>{t.exports=e.x("next/dist/compiled/next-server/app-route-turbo.runtime.prod.js",()=>require("next/dist/compiled/next-server/app-route-turbo.runtime.prod.js"))},41926,e=>{"use strict";e.s(["getAccessToken",()=>n]);var t=e.i(65617);let r=`${process.env.MODMED_BASE_URL}/ema-dev/firm/${process.env.MODMED_FIRM_PREFIX}/ema/ws/oauth2/grant`,a=null,s=0;async function n(){if(a&&Date.now()<s)return a;try{if(!process.env.MODMED_USERNAME||!process.env.MODMED_PASSWORD||!process.env.MODMED_API_KEY)throw Error("Missing required environment variables for authentication");let e=await t.default.post(r,new URLSearchParams({grant_type:"password",username:process.env.MODMED_USERNAME,password:process.env.MODMED_PASSWORD}),{headers:{"Content-Type":"application/x-www-form-urlencoded","x-api-key":process.env.MODMED_API_KEY}});if(a=e.data.access_token,s=Date.now()+1e3*e.data.expires_in-6e4,!a)throw Error("Failed to obtain access token");return a}catch(e){throw console.error("Token fetch error:",e.response?.data||e.message),Error(`Authentication failed: ${e.response?.data?.error||e.message}`)}}},11204,(e,t,r)=>{},5252,e=>{"use strict";e.s(["handler",()=>N,"patchFetch",()=>P,"routeModule",()=>T,"serverHooks",()=>O,"workAsyncStorage",()=>D,"workUnitAsyncStorage",()=>M],5252);var t=e.i(47909),r=e.i(74017),a=e.i(96250),s=e.i(59756),n=e.i(61916),o=e.i(69741),i=e.i(16795),l=e.i(87718),d=e.i(95169),c=e.i(47587),p=e.i(66012),u=e.i(70101),g=e.i(26937),y=e.i(10372),m=e.i(93695);e.i(52474);var h=e.i(220);e.s(["GET",()=>E,"POST",()=>v,"PUT",()=>A],13753);var x=e.i(89171),f=e.i(41926);let w=`${process.env.MODMED_BASE_URL}/ema-dev/firm/${process.env.MODMED_FIRM_PREFIX}/ema/fhir/v2/AllergyIntolerance`;async function R(e,t,r,a,s=0){if(!process.env.MODMED_API_KEY){if(console.log(`Mocking ${e} request to ${t}`),"GET"===e)return{status:200,data:{resourceType:"Bundle",total:1,entry:[{resource:{resourceType:"AllergyIntolerance",id:"mock-allergy-123",clinicalStatus:{coding:[{system:"http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",code:"active"}]},code:{coding:[{system:"http://snomed.info/sct",code:"12345",display:"Peanut Allergy"}]},patient:{reference:"Patient/mock-123"},recordedDate:"2025-01-01"}}]}};if("POST"===e||"PUT"===e)return{status:"POST"===e?201:200,data:{...r,id:r?.id||`mock-allergy-${Date.now()}`}}}let n=a||await (0,f.getAccessToken)(),o={accept:"application/fhir+json",authorization:`Bearer ${n}`,"x-api-key":process.env.MODMED_API_KEY,"content-type":"application/fhir+json"};try{let a=new AbortController,i=setTimeout(()=>a.abort(),1e4),l=await fetch(t,{method:e,headers:o,body:r?JSON.stringify(r):void 0,signal:a.signal});clearTimeout(i);let d=l.headers.get("content-type");if(!l.ok){let a={status:l.status,statusText:l.statusText},o=await l.text();if(console.log("Raw Response Body:",o||"Empty response"),d?.includes("application/json")||d?.includes("application/fhir+json"))try{let e=JSON.parse(o);a={...a,...e},console.log("Parsed Error Response:",e)}catch(e){console.warn("Failed to parse error response as JSON:",e),a.rawText=o||"Empty response"}else a.rawText=o||"Empty response";if((429===l.status||503===l.status)&&s<3)return console.log(`Retrying request (attempt ${s+2})...`),await new Promise(e=>setTimeout(e,1e3*(s+1))),R(e,t,r,n,s+1);throw Error(JSON.stringify(a))}if(204===l.status||!d?.includes("json"))return{status:l.status,data:null};let c=await l.json();return console.log("ModMed API Success Response:",JSON.stringify(c,null,2)),{status:l.status,data:c}}catch(e){if("AbortError"===e.name)throw Error("Request timed out after 10 seconds");throw console.error("API request error:",e.message),e}}async function E(e){try{let{searchParams:t}=new URL(e.url),r=t.get("id"),a=t.get("patient"),s=w;r?s=`${w}/${r}`:a&&(s=`${w}?patient=${a}`);let n=await (0,f.getAccessToken)(),o=(await R("GET",s,void 0,n)).data||{},i=r?[o].filter(Boolean).map(e=>({id:e.id||"N/A",allergen:e.code?.coding?.[0]?.display||"Unknown",status:e.clinicalStatus?.coding?.[0]?.code||"unknown",patientId:e.patient?.reference?.replace("Patient/","")||"N/A",recordedDate:e.recordedDate||""})):o.entry?.map(e=>{let t=e.resource;return{id:t.id||"N/A",allergen:t.code?.coding?.[0]?.display||"Unknown",status:t.clinicalStatus?.coding?.[0]?.code||"unknown",patientId:t.patient?.reference?.replace("Patient/","")||"N/A",recordedDate:t.recordedDate||""}})||[];return x.NextResponse.json(i)}catch(t){console.error("Error fetching allergies:",t.message);let e=t.message.startsWith("{")?JSON.parse(t.message):{details:t.message};return x.NextResponse.json({error:"Failed to fetch allergies",details:e},{status:e.status||500})}}async function v(e){try{let t=await (0,f.getAccessToken)(),r=await e.json();if(!r.allergen||!r.patientId)throw Error("Missing required fields: allergen, patientId");let a={resourceType:"AllergyIntolerance",clinicalStatus:{coding:[{system:"http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",code:r.status||"active"}]},code:{coding:[{system:"http://snomed.info/sct",code:r.allergenCode||"12345",display:r.allergen}]},patient:{reference:`Patient/${r.patientId}`},recordedDate:r.recordedDate||new Date().toISOString().split("T")[0]};console.log("FHIR Payload Sent to ModMed (POST):",JSON.stringify(a,null,2));let s=await R("POST",w,a,t);return x.NextResponse.json(s.data||{message:"Allergy created",id:s.data?.id},{status:201})}catch(t){console.error("Error creating allergy:",t.message);let e=t.message.startsWith("{")?JSON.parse(t.message):{details:t.message};return x.NextResponse.json({error:"Failed to create allergy",details:e},{status:e.status||500})}}async function A(e){try{let t=await (0,f.getAccessToken)(),r=await e.json();if(!r.id||!r.allergen||!r.patientId)throw Error("Missing required fields: id, allergen, patientId");let a={resourceType:"AllergyIntolerance",id:r.id,clinicalStatus:{coding:[{system:"http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",code:r.status||"active"}]},code:{coding:[{system:"http://snomed.info/sct",code:r.allergenCode||"12345",display:r.allergen}]},patient:{reference:`Patient/${r.patientId}`},recordedDate:r.recordedDate||new Date().toISOString().split("T")[0]};console.log("FHIR Payload Sent to ModMed (PUT):",JSON.stringify(a,null,2));let s=await R("PUT",`${w}/${r.id}`,a,t);return x.NextResponse.json(s.data||{message:"Allergy updated",id:r.id},{status:200})}catch(t){console.error("Error updating allergy:",t.message);let e=t.message.startsWith("{")?JSON.parse(t.message):{details:t.message};return x.NextResponse.json({error:"Failed to update allergy",details:e},{status:e.status||500})}}var S=e.i(13753);let T=new t.AppRouteRouteModule({definition:{kind:r.RouteKind.APP_ROUTE,page:"/api/allergy/route",pathname:"/api/allergy",filename:"route",bundlePath:""},distDir:".next",relativeProjectDir:"",resolvedPagePath:"[project]/app/api/allergy/route.ts",nextConfigOutput:"",userland:S}),{workAsyncStorage:D,workUnitAsyncStorage:M,serverHooks:O}=T;function P(){return(0,a.patchFetch)({workAsyncStorage:D,workUnitAsyncStorage:M})}async function N(e,t,a){var x;let f="/api/allergy/route";f=f.replace(/\/index$/,"")||"/";let w=await T.prepare(e,t,{srcPage:f,multiZoneDraftMode:!1});if(!w)return t.statusCode=400,t.end("Bad Request"),null==a.waitUntil||a.waitUntil.call(a,Promise.resolve()),null;let{buildId:R,params:E,nextConfig:v,isDraftMode:A,prerenderManifest:S,routerServerContext:D,isOnDemandRevalidate:M,revalidateOnlyGenerated:O,resolvedPathname:P}=w,N=(0,o.normalizeAppPath)(f),_=!!(S.dynamicRoutes[N]||S.routes[P]);if(_&&!A){let e=!!S.routes[P],t=S.dynamicRoutes[N];if(t&&!1===t.fallback&&!e)throw new m.NoFallbackError}let C=null;!_||T.isDev||A||(C="/index"===(C=P)?"/":C);let k=!0===T.isDev||!_,I=_&&!k,j=e.method||"GET",b=(0,n.getTracer)(),q=b.getActiveScopeSpan(),U={params:E,prerenderManifest:S,renderOpts:{experimental:{cacheComponents:!!v.experimental.cacheComponents,authInterrupts:!!v.experimental.authInterrupts},supportsDynamicResponse:k,incrementalCache:(0,s.getRequestMeta)(e,"incrementalCache"),cacheLifeProfiles:null==(x=v.experimental)?void 0:x.cacheLife,isRevalidate:I,waitUntil:a.waitUntil,onClose:e=>{t.on("close",e)},onAfterTaskError:void 0,onInstrumentationRequestError:(t,r,a)=>T.onRequestError(e,t,a,D)},sharedContext:{buildId:R}},$=new i.NodeNextRequest(e),F=new i.NodeNextResponse(t),H=l.NextRequestAdapter.fromNodeNextRequest($,(0,l.signalFromNodeResponse)(t));try{let o=async r=>T.handle(H,U).finally(()=>{if(!r)return;r.setAttributes({"http.status_code":t.statusCode,"next.rsc":!1});let a=b.getRootSpanAttributes();if(!a)return;if(a.get("next.span_type")!==d.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${a.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let s=a.get("next.route");if(s){let e=`${j} ${s}`;r.setAttributes({"next.route":s,"http.route":s,"next.span_name":e}),r.updateName(e)}else r.updateName(`${j} ${e.url}`)}),i=async n=>{var i,l;let d=async({previousCacheEntry:r})=>{try{if(!(0,s.getRequestMeta)(e,"minimalMode")&&M&&O&&!r)return t.statusCode=404,t.setHeader("x-nextjs-cache","REVALIDATED"),t.end("This page could not be found"),null;let i=await o(n);e.fetchMetrics=U.renderOpts.fetchMetrics;let l=U.renderOpts.pendingWaitUntil;l&&a.waitUntil&&(a.waitUntil(l),l=void 0);let d=U.renderOpts.collectedTags;if(!_)return await (0,p.sendResponse)($,F,i,U.renderOpts.pendingWaitUntil),null;{let e=await i.blob(),t=(0,u.toNodeOutgoingHttpHeaders)(i.headers);d&&(t[y.NEXT_CACHE_TAGS_HEADER]=d),!t["content-type"]&&e.type&&(t["content-type"]=e.type);let r=void 0!==U.renderOpts.collectedRevalidate&&!(U.renderOpts.collectedRevalidate>=y.INFINITE_CACHE)&&U.renderOpts.collectedRevalidate,a=void 0===U.renderOpts.collectedExpire||U.renderOpts.collectedExpire>=y.INFINITE_CACHE?void 0:U.renderOpts.collectedExpire;return{value:{kind:h.CachedRouteKind.APP_ROUTE,status:i.status,body:Buffer.from(await e.arrayBuffer()),headers:t},cacheControl:{revalidate:r,expire:a}}}}catch(t){throw(null==r?void 0:r.isStale)&&await T.onRequestError(e,t,{routerKind:"App Router",routePath:f,routeType:"route",revalidateReason:(0,c.getRevalidateReason)({isRevalidate:I,isOnDemandRevalidate:M})},D),t}},m=await T.handleResponse({req:e,nextConfig:v,cacheKey:C,routeKind:r.RouteKind.APP_ROUTE,isFallback:!1,prerenderManifest:S,isRoutePPREnabled:!1,isOnDemandRevalidate:M,revalidateOnlyGenerated:O,responseGenerator:d,waitUntil:a.waitUntil});if(!_)return null;if((null==m||null==(i=m.value)?void 0:i.kind)!==h.CachedRouteKind.APP_ROUTE)throw Object.defineProperty(Error(`Invariant: app-route received invalid cache entry ${null==m||null==(l=m.value)?void 0:l.kind}`),"__NEXT_ERROR_CODE",{value:"E701",enumerable:!1,configurable:!0});(0,s.getRequestMeta)(e,"minimalMode")||t.setHeader("x-nextjs-cache",M?"REVALIDATED":m.isMiss?"MISS":m.isStale?"STALE":"HIT"),A&&t.setHeader("Cache-Control","private, no-cache, no-store, max-age=0, must-revalidate");let x=(0,u.fromNodeOutgoingHttpHeaders)(m.value.headers);return(0,s.getRequestMeta)(e,"minimalMode")&&_||x.delete(y.NEXT_CACHE_TAGS_HEADER),!m.cacheControl||t.getHeader("Cache-Control")||x.get("Cache-Control")||x.set("Cache-Control",(0,g.getCacheControlHeader)(m.cacheControl)),await (0,p.sendResponse)($,F,new Response(m.value.body,{headers:x,status:m.value.status||200})),null};q?await i(q):await b.withPropagatedContext(e.headers,()=>b.trace(d.BaseServerSpan.handleRequest,{spanName:`${j} ${e.url}`,kind:n.SpanKind.SERVER,attributes:{"http.method":j,"http.target":e.url}},i))}catch(t){if(q||t instanceof m.NoFallbackError||await T.onRequestError(e,t,{routerKind:"App Router",routePath:N,routeType:"route",revalidateReason:(0,c.getRevalidateReason)({isRevalidate:I,isOnDemandRevalidate:M})}),_)throw t;return await (0,p.sendResponse)($,F,new Response(null,{status:500})),null}}}];

//# sourceMappingURL=%5Broot-of-the-server%5D__1fc1f0b8._.js.map